enum NftType {
  ERC721
  ERC1155
}

type Nft @entity {
  id: ID! # tokenAddress + tokenId
  tokenAddress: String!
  tokenId: BigInt!
  owner: Account!
  type: NftType!
  amount: BigInt
  roles: [Role!] @derivedFrom(field: "nft")
}

type Account @entity {
  id: ID! # address
  nfts: [Nft!] @derivedFrom(field: "owner")
  rolesGranted: [RoleAssignment!] @derivedFrom(field: "grantor")
  rolesReceived: [RoleAssignment!] @derivedFrom(field: "grantee")
  roleApprovals: [RoleApproval!] @derivedFrom(field: "grantor")
}

type RoleAssignment @entity {
  id: ID! # rolesRegistryAddress + grantorAddress + tokenAddress + tokenId + granteeAddress + roleHash
  role: Role!
  nft: Nft!
  grantor: Account!
  grantee: Account!
  expirationDate: BigInt!
  revocable: Boolean!
  data: Bytes!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Role @entity {
  id: ID! # rolesRegistryAddress + tokenAddress + tokenId + roleHash
  rolesRegistry: RolesRegistry!
  roleHash: Bytes!
  nft: Nft!
  lastNonRevocableExpirationDate: BigInt!
  roleAssignments: [RoleAssignment!] @derivedFrom(field: "role")
}

type RoleApproval @entity {
  id: ID! # rolesRegistryAddress + grantorAddress + operatorAddress + tokenAddress
  rolesRegistry: RolesRegistry!
  grantor: Account!
  operator: Account!
  tokenAddress: String!
  isApproved: Boolean!
}

type RolesRegistry @entity {
  id: ID! # contractAddress
  roles: [Role!] @derivedFrom(field: "rolesRegistry")
  roleApprovals: [RoleApproval!] @derivedFrom(field: "rolesRegistry")
}

# Helper Entities

type HelperNftOwnership @entity {
  id: ID! # tokenAddress + tokenId + owner
  nft: Nft!
  originalOwner: Account!
  isSameOwner: Boolean!
}