type Nft @entity {
  id: ID! # tokenId + tokenAddress
  tokenAddress: String!
  tokenId: BigInt!
  owner: Account!
  roles: [Role!] @derivedFrom(field: "nft")
}

type Account @entity {
  id: ID! # address
  nfts: [Nft!] @derivedFrom(field: "owner")
  rolesGranted: [RoleAssignment!] @derivedFrom(field: "grantor")
  rolesReceived: [RoleAssignment!] @derivedFrom(field: "grantee")
  roleApprovals: [RoleApproval!] @derivedFrom(field: "grantor")
}

type RoleAssignment @entity {
  id: ID! # grantorAddress + tokenId + tokenAddress + granteeAddress + roleHash
  role: Role!
  nft: Nft!
  grantor: Account!
  grantee: Account!
  expirationDate: BigInt!
  revocable: Boolean!
  data: Bytes!
  createdAt: BigInt!
}

type Role @entity {
  id: ID! # tokenId + tokenAddress + roleHash
  roleHash: Bytes!
  nft: Nft!
  roleAssignments: [RoleAssignment!] @derivedFrom(field: "role")
}

type RoleApproval @entity {
  id: ID! # grantorAddress + operatorAddress + tokenAddress
  grantor: Account!
  operator: Account!
  tokenAddress: String!
}
